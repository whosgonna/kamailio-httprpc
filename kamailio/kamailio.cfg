#!KAMAILIO

#!defenv RPC_USER
#!defenv RPC_PASS

loadmodule "pv"
loadmodule "xlog"
loadmodule "tm"
loadmodule "sl"
loadmodule "textops"
loadmodule "corex"
loadmodule "kex"
loadmodule "json"
loadmodule "xhttp"
loadmodule "jsonrpcs"
loadmodule "tcpops"
loadmodule "htable"
loadmodule "auth"

disable_sctp = yes
force_rport  = yes

listen = udp:eth0:5060

tcp_accept_no_cl = yes
socket_workers   = 2
listen           = tcp:0.0.0.0:8081


modparam("jsonrpcs", "transport", 0)
modparam("xhttp", "url_match", "^/rpc")

#!idfef WITH_VALIDATE_RPC_METHOD
    modparam("htable", "htable","rpc_allow=>size=4");
#!endif


request_route {
    xinfo("[$ci $rm-$cs] RURI: $ru\n");

    send_reply("404", "Not Found");
    exit;
}



event_route[xhttp:request] {
    if ( $Rp != 8081 ) {
        xcrit("HTTP Request not received on port 8081. reject\n");
        tcp_close_connection();
    }

    if ( $hu =~ "^/rpc/ping" ) {
        xinfo("HTTP 'ping' request received\n");
		xhttp_reply("200", "OK", "text/plain", "pong\r\n");
		exit;
    }

    xinfo("HTTP $rm REQUEST received. Path: [$hu]\n");

    #!ifdef WITH_XHTTP_RPC_AUTH
        route(XHTTP_RPC_AUTH);
    #!endif

    #!ifdef WITH_VALIDATE_RPC_METHOD
        route(VALIDATE_RPC_METHOD);
    #!endif

    xnotice("Calling JSONRPC_Dispatch: $rb\n");

    jsonrpc_dispatch();
}


route[XHTTP_RPC_AUTH]{
    if ( $au != $null && $au != $def(RPC_USER) ) {
        xerr("Invalid RPC user : [$au].\n");
        xhttp_reply(
            "403", "Unauthorized", "text/plain", "403 Unauthorized\r\n"
        );
        exit;
    }

    if ( !pv_www_authenticate("$Ri", "foopass", "0") ) {
        switch ( $rc ) {
            case -2:
                xerr("Invalid RPC password for user $au\n");
                xhttp_reply(
                    "403", "Unauthorized", "text/plain", "403 Unauthorized\r\n"
                );
                exit;
            case -5:
                xinfo("HTTP request with no crednetials. Send challenge\n");
                www_challenge("$Ri", "0");
                exit;
            default:
                xinfo("Misc. WWW auth failure. $$rc [$rc]\n");
                xhttp_reply(
                    "503", "Server Error", "text/plain", "503 Server Error\r\n"
                );
                exit;
        }
    }

    consume_credentials();
}



route[VALIDATE_RPC_METHOD] {
	json_get_field("$rb", "method", "$avp(rpc_method)");
    $avp(rpc_method) = $(avp(rpc_method){s.unquote});

    if ( $sht(rpc_allow=>$avp(rpc_method)) == 1 ) {
        return;
    }

    xcrit("RPC Method: $avp(rpc_method) NOT allowed\n");

    json_get_field("$rb", "id", "$avp(rpc_id)");
    $avp(rpc_id) = $(avp(rpc_id){s.unquote});

    $vn(jsonfail) = "{\"jsonrpc\":\"2.0\","
        + "\"error\":{\"code\":-326010,"
        + "\"message\":\"Method Not Found\","
        + "\"data\":\"Method '" + $avp(rpc_method) + "' not allowed\""
        + "},\"id\":\"" + $avp(rpc_id) + "\"}";

    xhttp_reply( "200", "OK", "application/json", "$vn(jsonfail)");
    exit;
}


event_route[htable:mod-init] {
    $sht(rpc_allow=>stats.fetch)    = 1;
    $sht(rpc_allow=>core.version)    = 1;
    $sht(rpc_allow=>mod.stats)     = 1;
}

